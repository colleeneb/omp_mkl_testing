#include <iostream>
#include "mkl.h"
#include "mkl_omp_offload.h"

{% if l_output %}
bool almost_equal({{l_output[0][0]}} x, {{l_output[0][0]}} gold, {{l_output[0][0]}} tol) {
  return gold * (1-tol) <= x && x <= gold * (1 + tol);
}
{% endif %}

int main( int argc, char* argv[] )
{

{%- for t,name in l_scalar_input %}
  {{t}} {{name}} = 1;
{%- endfor %}

{%- for t,name in l_aggregate_input %}
  {{t}} *{{name}} = ({{t}} *)malloc( sizeof({{t}})*{{l_scalar_input[0][1]}});
{%- endfor %}

{%- for t,name in l_input_output %}
  {{t}} *{{name}}_cpu = ({{t}} *)malloc( sizeof({{t}})*{{l_scalar_input[0][1]}});
  {{t}} *{{name}}_gpu = ({{t}} *)malloc( sizeof({{t}})*{{l_scalar_input[0][1]}});
{%- endfor %}

{%- if l_output %}
  {{l_output[0][0]}} {{l_output[0][1]}}_cpu = 0;
  {{l_output[0][0]}} {{l_output[0][1]}}_gpu = 0;
{%- endif %}

  for(int i=0;i<{{l_scalar_input[0][1]}};i++)
    {
{%- for t,name in l_aggregate_input %}
      {{name}}[i] = 1;
{%- endfor %}
{%- for t,name in l_input_output %}
      {{name}}_gpu[i] = 1;
      {{name}}_gpu[i] = 1;
{%- endfor %}
    }

{%- if l_output %}
   {{l_output[0][1]}}_cpu = cblas_{{name_function}} (
{%- for t,name in l_types_names %}
    {%- if loop.last %}
    {{name}}
    {%- else %}
    {{name}},
    {%- endif %}
{%- endfor %}

   );

#pragma omp target data map(to:\
{%- for t,name in l_aggregate_input %}
   {%- if loop.last %}
   {{name}}[0:{{l_scalar_input[0][1]}}] \
   {%- else %}
   {{name}}[0:{{l_scalar_input[0][1]}}],\
   {%- endif %}
{%- endfor %}
)
    {
      #pragma omp target variant dispatch use_device_ptr( \
{%- for t,name in l_aggregate_input %}
   {%- if loop.last %}
   {{name}} \
   {%- else %}
   {{name}}, \
   {%- endif %}
{%- endfor %}
) 

   {{l_output[0][1]}}_gpu = cblas_{{name_function}} (
{%- for t,name in l_types_names %}
    {%- if loop.last %}
    {{name}}
    {%- else %}
    {{name}},
    {%- endif %}
{%- endfor %}
   );
}
  if (!almost_equal({{l_output[0][1]}}_gpu, {{l_output[0][1]}}_cpu, 0.1)) {
    std::cerr << "Expected: " << {{l_output[0][1]}}_cpu << " Got: " << {{l_output[0][1]}}_gpu << std::endl;
    std::exit(112);
  }

{% else %}


   cblas_{{name_function}} (
{% for t,name in l_types_names %}
    {% if loop.last %}
    {{name}}
    {% else %}
    {{name}},
    {% endif %}
{% endfor %}

  for(int i=0;i<{{l_scalar_input[0][1]}};i++)
    {

  if (!almost_equal({{l_output[0][1]}}_gpu, {{l_output[0][1]}}_cpu, 0.1)) {
    std::cerr << "Expected: " << {{l_output[0][1]}}_cpu << " Got: " << {{l_output[0][1]}}_gpu << std::endl;
    std::exit(112);
  }
     }

{% endif %}


  return 0;
}
