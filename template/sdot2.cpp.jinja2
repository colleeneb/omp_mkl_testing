#include <iostream>
#include "mkl.h"
#include "mkl_omp_offload.h"

{% if l_output %}
bool almost_equal({{l_output[0]}} x, {{l_output[0]}} gold, {{l_output[0]}} tol) {
  return gold * (1-tol) <= x && x <= gold * (1 + tol);
}
{% endif %}

int main( int argc, char* argv[] )
{

{% for t,name in l_scalar_input %}
  {{t}} {{name}} = 1;
{% endfor %}

{% for t,name in l_aggregate_input %}
  {{t}} *{{name}} = ({{t}} *)malloc( sizeof({{t}})*{{l_scalar_input[0][1]}});
{% endfor %}

{% for t,name in l_input_output %}
  {{t}} *{{name}}_cpu = ({{t}} *)malloc( sizeof({{t}})*{{l_scalar_input[0][1]}});
  {{t}} *{{name}}_gpu = ({{t}} *)malloc( sizeof({{t}})*{{l_scalar_input[0][1]}});
{% endfor %}

{% if l_output %}
  {{l_output[0]}} {{l_output[1]}}_cpu = 0;
  {{l_output[0]}} {{l_output[1]}}_gpu = 0;
{% endif %}

  for(int i=0;i<{{l_scalar_input[0][1]}};i++)
    {
{% for t,name in l_aggregate_input %}
      {{name}}[i] = 1;
{% endfor %}
{% for t,name in l_input_output %}
      {{name}}_gpu[i] = 1;
      {{name}}_gpu[i] = 1;
{% endfor %}
    }

{% if l_output %}
   {{l_output[1]}}_cpu  = cblas_{{name_function}}(
    {{l_scalar_input[0][1]}},
    {{l_aggregate_input[0][1]}},
    {{l_scalar_input[1][1]}},
    {{l_aggregate_input[1][1]}},
    {{l_scalar_input[2][1]}});

#pragma omp target data map(to:{{l_aggregate_input[0][1]}}[0:{{l_scalar_input[0][1]}}],{{l_aggregate_input[1][1]}}[0:{{l_scalar_input[0][1]}}])
    {
      #pragma omp target variant dispatch use_device_ptr({{l_aggregate_input[0][1]}}, {{l_aggregate_input[1][1]}}) 
   {{l_output[1]}}_gpu  = cblas_{{name_function}}(
    {{l_scalar_input[0][1]}},
    {{l_aggregate_input[0][1]}},
    {{l_scalar_input[1][1]}},
    {{l_aggregate_input[1][1]}},
    {{l_scalar_input[2][1]}});
    }

  if (!almost_equal({{l_output[1]}}_gpu, {{l_output[1]}}_cpu, 0.1)) {
    std::cerr << "Expected: " << {{l_output[1]}}_cpu << " Got: " << {{l_output[1]}}_gpu << std::endl;
    std::exit(112);
  }

{% else %}
   cblas_{{name_function}}({{l_scalar_input_[0]}}, {{l_aggregate_input_[0]}},
   {{l_scalar_input_[1]}}, {{l_aggregate_input_[1]}}, {{l_scalar_input_[2]}});
{% endif %}


  return 0;
}
